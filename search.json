[{"title":"计网知识点梳理","date":"2024-11-24T14:01:45.000Z","url":"2024/11/24/%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86/","tags":[["计算机网络","tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"]],"categories":[["cs专业课","categories/cs%E4%B8%93%E4%B8%9A%E8%AF%BE/"]],"content":" based on Computer Networking_ A Top-Down Approach, Global Edition, 8th Edition 1. Intro 什么是网络边缘、网络核心？ 网络核心是指分组交换的网络(mesh)和连接各终端的链接 网络边缘是指各主机、终端 什么是Internet? 终端、分组交换、交流、网络链接、协议、网络标准组成的系统 提供应用服务的组织架构，提供编程接口给各分布的应用 类似于socket?：socket是关于接口的调用 只有socket吗？ 什么是协议 定义了格式、信息的收发顺序、在信息传输上采取的行为 TCP, UDP TCP的三次握手？ 什么是ISP？ 什么是RFC？ Internet协议字典，包含了关于互联网各种相关信息 现在最常用的两种住宅宽带的网络接入？ DSL（接入网） 用一根存在的点环线连到central office cable 非对称 其他住宅网络连接 FTTH(光纤到户) 家庭网络 机构接入的网络 以太网（有线的） WLAN（无线） 物理链路 双绞线(TP) 同轴电缆 光纤 无线链路 什么是分组交换和电路交换？ 分组交换 在我们学了一点网络层的内容后回来看，会有个更清晰的脉络。在网络层讲路由器的时候，其实就是对分组交换更具体的展开 我们是要在不同端口(input, output port)中来进行转发的（根据转发表，而这个转发表体现了路由&#x2F;route，它是由远程的控制器计算的，而不由路由器实际参与）所以分组交换其实只涉及我们相邻路由器转发的这一很短的部分 其实质是队列的操作处理， 所以我们会遇到HOL（首部阻塞问题）【此处请联想一下接下来哪里还出现了HOL，由此思考HOL会在哪些特点出现时出现】。我们需要考虑如何处理各个分组。我们可以把不同的组分成几个类，按某些特定的顺序来推入（权重、优先权、特定顺序等） store-and-forward transmission：当整个分组都被接收到的时候才能进行转发 电路交换 什么是电路(circuit)？ 就是在传输前提前建立好的连接（类比于预约一个餐厅），并且预留好好一个稳定不变的传输速率 什么是FDM,TDM? FDM(频率)：横着切 TDM(时间)：竖着切 分组交换中有哪些延迟类型呢 处理延迟 bit级别 排队延迟 在输出链路上等待传输 传输延迟(transmission) 将分组发送到链路上 传播延时(propagation) 在整个传到下一个host的时间 什么是吞吐量？ 怎么求两个host之间的吞吐量？（最小值&#x2F;bottleneck link） 在每层上不同信息的名称？ 什么是IETF？ 互联网工程任务组 什么是IP欺骗(IP_Spoofing)？ 伪造源地址 什么是DoS？ 通过请求压垮计算机 为什么要分层？ 设计&#x2F;讨论复杂系统 明确的结构允许识别系统各部分之间的关系 模块化减轻了维护、更新系统的压力 2. Application Layer C-s架构和p2p架构？ 如何交流进程？(process) 同主机内：inter-process communication 不同主机：交换信息(messages) 不同主机之间如何交换信息呢？ 对于主机来说，需要socket去对应信息 对于信息（进程） 来说，需要标识符(identifier),这个标识符既需要包含IP地址，也需要端口号（单单ip是不行的：一个ip可能同时运行多个进程） socket处于哪里？ 传输层和应用层之间 什么是TLS？ transport layer security 它不是与UDP、TCP并列，而是对TCP的改进 什么是HTTP? 他是个协议！(应用层的协议) 类比于TCP,UDP之于transport layer hypertext transfer protocol 它使用TCP连接(port 80) 无状态，服务器不会存储过往用户的请求 ？那cache呢，它不属于这个协议内部吗 对，cache是我们后面发明出来用于保存先前信息的 那它这个协议的作用是啥呢？整个过程中我使用了TCP建立连接、发送消息，和它有啥关系？ 首先HTTP是在用户和服务器的进程中实现的，它定义了“在服务器和用户间交流的信息的格式”，它同时定义了用户如何从服务器那里请求信息 persistent HTTP? non-persistent HTTP? non-persistent TCP一次连接的过程中只能发送一个object 衍生思考：pipeline?既然我这个信息的传输是依靠TCP在传输层通信的，那么我们是否在此处也会去考虑到TCP相关的细节和协议？所以TCP并不遵循流水线协议？那此处是如何控制只传输一个文件就关闭链接的呢？难道是接收到一个ack就关闭吗？但流水线的关键不就在于就算它还没返回ack，我也在不停地发吗 首先，连接的关闭不是依靠传输层&#x2F;TCP的，而是应用层的HTTP协议本身，在其头部会存放链接关闭的信息 其次，TCP确实不依靠流水线协议 这种情况下的响应时间？ 2RTT+文件传输时间 persistent(1.1) 流水线 有关书中提到的关于persistent(http/1.1)的流水线功能支持，但在题目中做到其仍是停等协议的迷思实际上HTTP&#x2F;1.1管道化技术不是默认开启，而且浏览器基本都没有支持。所以我们只要知道它有这个功能，但是没有被使用就行了。 HTTP有哪些请求信息模式？ post 上传信息 head 如果一个URL以GET被请求，则才会返回该请求头部 get 包含用户数据在get请求数据中 put 上传新文件 取代URL中存在的post请求的主体 301，400，505分别代表什么？ 301：requested object moved, new location specified later in this message 400：request msg not understood by server 500：HTTP Version Not Supported cookie由哪些组成？ http响应、请求报文中的cookies首部行 用户端保留一个cookies文件，由用户浏览器管理 web站点有一个后端数据库 什么是web cache 同时叫做代理服务器 是一个实体服务器 延伸出来了conditional get 其在报文中的标志是？ 什么是HTTP&#x2F;2？ 由于HTTP&#x2F;1.1可能会遇到 HOL、重传（各种关于TCP信息丢失的情况），此处引入版本2 把大文件拆成许多帧，然后并行的传，而非像1.1一样，等传了一个完整的文件以后才能传下一个文件（队列的特性） E-mail由哪些组成 user agents mail servers SMTP 基于TCP HTTP和SMTP的区别？ http是用户请求数据，SMTP是用户发送数据 SMTP以CRLF为信息结尾 SMTP用的是persistent connection SMTP在整个流程的收发中，在何时起作用？ 为什么我们发邮件还要先发送到发送服务器上，而不能直接发送到对方服务器上？ 因为本地的agent是没有关于目的地的信息的 注意！接收方是不用SMTP协议的，因为SMTP是pull，而不是request。此处应该用IMAP或HTTP IMAP在何时作用？ 见上 到底DNS是什么东西？ 定义 分布的数据库（在各个分层的DNS服务器中） 一个可以让host查询分布数据库的应用层的协议 直观来说，他是一个用于转换主机名(hostname)到IP地址的一种管理册的服务 那什么是hostname,什么是IP address?他们有什么区别和联系呢？ 首先一个host同时拥有这两个标识符(identifier) 其次，hostname是为了让人类更便于记忆的（但因此他就缺少了地址的信息），而IP address就是提供地址信息 HTTP和SMTP都会应用DNS，当我们通过DNS查询到IP address后，可以启动TCP连接，连接到对应的host的端口 如果我们只用一个DNS服务器来处理所有DNS查询呢？（来自成千上万的主机的HTTP查询和e-mail信息） 高度中心化的：用户的查询是直接和DNS服务器交互的。 因此如果DNS服务器崩溃了，整个互联网也崩溃了 所以实际的DNS是层次化、分布设计的。从顶向下分别是： 根服务器（也不只有一个） 顶级域服务器(TLD) 权威DNS服务器(Authoritative) ps:还有local DNS server，但它并不严格属于DNS的层次架构。它主要是给不同ISP用的 DNS的递归查询和遍历查询 遍历查询： 递归查询： 想象函数的调用 DNS基于什么连接？ 基本上是UDP 但在特定情况（如zone transfer），基于TCP DNS message可以包含多个查询和回答 DNS的接口是？ 53 DNS Resource records(RRs)是什么？ RRs 四元组 (name, value, type, TTL) 用于提供hostname-to-IP的mapping SMTP, IMAP, POP3的接口分别是？ SMTP: 25 IMAP: 143 POP3: 110 如何计算文件分发的时间？ C-S? 需要计算服务器上传所有文件的时间、每个电脑下载单个文件的时间（为了简便计算，我们只需计算下载速率最慢的那个机子，即所需下载时间最长的机子），然后取所有时间的最大值 P2P? 需要计算服务器上传单个文件的是按，每个电脑下载单个文件的时间（为了简便计算，我们只需计算下载速率最慢的那个机子，即所需下载时间最长的机子），以及总文件数除以（所有上传速率相加）的时间，取其中最大值 BitTorrent中，如果一个host有相邻好几个邻居，它先从谁那里请求信息呢？给谁发送数据块呢？ 从最稀有的数据块获取 记录四个给它传输最快的peers，并每30s随机挑选一个幸运儿加入这个竞争 流媒体的服务 DASH CDNs(content distribution networks) 把视频存放到多个分布的地址 OTT(“over the top”) challenges:来自网络边缘的网络阻塞问题 3. Transport Layer 传输层在何处进行作用？ 在进程层面的交流，而非不同主机之间（这是网络层） 但传输层需要依靠网络层 什么是多路分解？多路复用？ 应该是我们在一个主机要从接口调用或传入信息的时候，把信息分解&#x2F;复用到多个对应接口(sockets) 多路复用 multiplex 把多个应用层传来的信息包装，添加传输层的头 多路分解 demultiplex 按照头部信息把接收到的segment传给正确的socket 那既然传输层是在单主机层面上的各种协议，但TCP又涉及到在两个主机间的传输，这究竟是怎么回事？ 它只是依赖于网络层和数据链路层，它只需要告诉网络层“我有这些数据段需要发送到这个 IP 地址”，然后网络层负责决定如何将数据段路由到目标主机 TCP 类似邮局的打包部门。将信件装进信封、标上序号，并记录对方是否收到。并不涉及直接传输 传输层涉及到接收方和发送方 发送方：从应用层传来信息，复用包装信息(multiplex)，添加segment头部信息，传给IP 接收方：从IP接收segment，提取应用层的信息，通过sockets分解（demultiplexes)信息到应用层 地址信息是如何在信息中存储的 IP来源和目的地都在datagram(network layer) 端口号都在segment(transport layer) UDP和TCP在多路分解的时候，是如何运行的？ UDP socket 两元组(目标IP地址，目标端口号) TCP socket 四元组(源IP地址，源端口号，目标IP地址，目标端口号) 创建UDP的时候，如果不申明，给它分配的端口号是在什么范围 1024 to 65535 UDP和TCP segment头部字节数？ UDP: 8 TCP: 20 UDP的优势 它不会建立连接，不会处理拥塞情况，可以非常快速、实时的传送信息 头部信息更小 哪些协议&#x2F;服务基于UDP？ DNS SNMP HTTP&#x2F;3 流媒体服务 如何计算checksum 首先明确，checksum是用于检验一个segment的完整性的 如何计算它的初始checksum呢？(sender) 由于一个segment的所有数据是可以通过2进制来表示的，所以我们要做的是就是把这些数组16位一分，然后全部加起来（当然，此时checksum部分默认置为0），相加步骤仍是补码计算的步骤，然后得到的数就是checksum 如果有溢出的1（负数），则把这个1从个位加上去，然后再对每位取反 如果无溢出（正数），则就是其本身 receiver如何检验？ 把所有数据16位一组相加，如果加起来全为1（16位1），则说明数据完整。（此处的加不涉及补码计算） rdt1.0&#x2F;2.0&#x2F;2.1&#x2F;2.2&#x2F;3.0的区别 rdt1.0: 在可靠信道上传输，即假设不会出错 rdt2.0(stop-and-wait protocol): 如果信道上会使字节翻转(bit error,指0-&gt;1&#x2F;1-&gt;0)，则引入ACK,NAK机制。（可能通过checksum，还可能通过其他检测字节是否发生错误的方式） 它只会在接收方正确的接收到信息后再发送下一个 rdt2.1: 如果ACK&#x2F;NAK被中断传输了呢？因此对每个包加一个序列号 rdt2.2: 我们甚至不需要NAK了。只需要ACK，对ACK编号就好了（它的作用和2.1一样，只是简化了）TCP用的就是这种 rdt3.0: 添加计时器，重传机制 RTT &#x3D; 2 * propagation time(单向的) 如何计算信道的利用率？ ”发送信息（包）所用的时间除“以”最早发送到接收到这一发送的ACK所用的时间“ 计时器啥时候启动？ 一个包的传输如果在半空丢失了，就启动计时器 选择性重传的窗口大小应该设置为多大 应该小于等于sequence number space的一半 否则会发生，可能因为ack在中途中断，没有发送到，而导致发送端一直在发送一个固定窗口的几个值，但有可能接收方的窗口在不断移动，而导致发送方可能会发送一个不完全匹配顺序，但包的序号相同，所以误以为正确传输的情况 什么是全双工(full-duplex)？ 就是在两个进程间，是可以同时双向传播的 什么是最大传输单元(MTU)，什么是最大报文大小(MSS)? MSS： 1460字节 是传输层报文data的最大大小 而不是TCP报文(包括头部)的最大的大小 MTU: 1500字节 TCP&#x2F;IP header的大小为40 即把传输层的报文传到网络层后，加上网络层头部的大小 TCP头部的长度？UDP头部的长度(bytes) TCP header 20 TCP&#x2F;IP header 40 UDP header 8 TCP报文中的各部分？ sequence number field&#x2F;ack number field:各32 bits receive window: 16 bits header length : 4 bits … TCP的初始序列号是随机设置的，为什么？ 因为有可能网络种还有在传输的先前建立的连接。防止不同的连接之间产生冲突。 TCP的ACK序号是什么？ 是期待的对方下一个传过来的序号，而非成功收到的序号 如何计算RTT 是动态计算的 exponential weighted moving average(EWMA) 指数加权移动平均 为什么要计算RTT？ 为了合理设置计时器的时间 预测RTT &#x3D; 0.875(1-a) * 先前的预测RTT + 0.125(a) * 最新检测到的RTT(这个参数是可变的，此处只是一个最常用的情况) RTT的变化率(DevRTT) &#x3D; 0.75(1-b) * DevRTT + 0.25(b) * |最新检测到的RTT - 预测RTT| 如何设置计时器的时间？ 预测RTT + 4 * DevRTT 为什么？ 因为TCP设置了三次冗余ACK的机制(快速重传) HTTP3基于什么？ UDP 关于拥塞控制的一些深入思考 什么是fast recovery??? 应该是三次冗余传输后要进行快速重传的状态 为什么三次冗余传输后没有降到一半？ 因为是要变到此时的ssthresh + 3，甚至可能不降反升 并且注意，在判断fast recovery得值得时候，我们得先重新判断ssthresh当时变化到多少！ 到底哪些状态是慢启动 升到ssthresh的时候（不包括等于ssthresh的点） 如果还没到ssthresh就降到1，则升和降得点都属于 其实就是在ssthresh下面的点！ 要判断到底是超时还是三次ACK的问题，我们要观察它下一个点的状态是否回到了1 如何判断超时 它的下一个点变为1 且超时可能和其他状态同时存在，比如快速恢复 ssthresh什么时候改变 最高点不改变，而是进行快速恢复&#x2F;下降到1这种情况下得点开始变化 注意！ssthresh是最高值的一半，而非上一次ssthresh的一半 如果本身就只有一个MSS大小，但还是超时了，此时返回大小1，且ssthresh也变为1（而非0.5） 宏观看拥塞控制：它是调控整个网络的 "},{"title":"hexo&github部署个人网站，在cards主题下如何配置网站图标(favicon)","date":"2024-11-24T10:12:42.000Z","url":"2024/11/24/hexo-github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%8C%E5%9C%A8cards%E4%B8%BB%E9%A2%98%E4%B8%8B%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87-favicon/","tags":[["website","tags/website/"],["hexo","tags/hexo/"]],"categories":[[" ",""]],"content":"配置 网站配置：hexo, github(reference blog) 所使用的主题：cards 添加favicon(网页图标) 准备好图片文件 在根文件夹下面的source文件夹里面新建images(名字自定义，此处是我为了管理图片设置的名字)文件夹，存放相应的图片 此处网站可以自动生成对应格式的压缩包，下载后解压放到上面所述的images文件夹 修改themes - cards - _config.yml文件，如下参考，路径应按照你实际存放的地址改，此处默认的根地址为上面说的那个source文件夹 然后即可看到网站生成了对应图标 "},{"title":"Hello World","date":"2024-11-24T06:53:09.978Z","url":"2024/11/24/hello-world/","categories":[[" ",""]],"content":"Hi, this is my first blog.As a cs student studying in China, I found it hard to really find an active and helpful commuinty.So if this website does it bit to help you in any aspect, I’d be fulfilled to save your valuable energy and time.There may be mistakes in my blogs. If you find them, please do contact me with e-mail 10235102441@stu.ecnu.edu.cn.I’m recently dedicated to studying deep learning, LLM, NLP, etc. Collabroations and commuincations are welcomed if you are also interested."},{"title":"categories","date":"2024-11-24T09:38:48.000Z","url":"categories/index.html","categories":[[" ",""]]},{"title":"search","date":"2024-11-24T09:25:07.000Z","url":"search/index.html","categories":[[" ",""]]},{"title":"tags","date":"2024-11-24T09:39:24.000Z","url":"tags/index.html","categories":[[" ",""]]}]